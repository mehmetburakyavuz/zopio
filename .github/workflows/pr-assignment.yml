# Automated Pull Request Assignment
#
# Purpose: Automatically assigns PRs to their authors and leverages CODEOWNERS
#          for reviewer assignment. Helps streamline the PR review process.
#
# Triggers:
#   - PR opened
#   - PR marked as ready for review (converted from draft)
#
# Features:
#   - Auto-assigns PR to its author for tracking
#   - Uses the .github/CODEOWNERS file for reviewer assignments
#   - Ensures reviewers are assigned based on the files changed
#   - Skips assignment if already assigned
#   - Only assigns reviewers to non-draft PRs
#   - Provides workload balancing for teams

name: Auto Assign PR

on:
  pull_request:
    types: [opened, ready_for_review]

# Prevent duplicate assignment runs
concurrency:
  group: assign-pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  assign-author:
    runs-on: ubuntu-latest
    steps:
      # Automatically assign PR to its author for better tracking
      - name: Assign PR to author
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            
            // Only assign if no assignees exist to avoid overwriting manual assignments
            if (pr.assignees.length === 0) {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                assignees: [pr.user.login]  // Assign to PR author
              });
              console.log(`Assigned PR #${pr.number} to author: ${pr.user.login}`);
            } else {
              console.log(`PR #${pr.number} already has assignees, skipping author assignment`);
            }

  assign-reviewers:
    runs-on: ubuntu-latest
    # Only assign reviewers to non-draft PRs
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Assign reviewers based on CODEOWNERS file
      - name: Assign reviewers based on CODEOWNERS
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            
            // Check if PR already has reviewers to avoid overwriting
            const reviews = await github.rest.pulls.listRequestedReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            if (reviews.data.users.length > 0 || reviews.data.teams.length > 0) {
              console.log('PR already has reviewers assigned, skipping');
              return;
            }
            
            // Fetch list of files changed in this PR
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const changedPaths = files.data.map(f => f.filename);
            console.log(`Files changed in PR #${pr.number}: ${changedPaths.length}`);
            
            // Read CODEOWNERS file to determine ownership
            const fs = require('fs');
            const path = require('path');
            
            try {
              const codeownersPath = path.join('.github', 'CODEOWNERS');
              const codeownersContent = fs.readFileSync(codeownersPath, 'utf8');
              const codeownersLines = codeownersContent.split('\n').filter(line => 
                line.trim() !== '' && !line.startsWith('#')
              );
              
              // Parse CODEOWNERS file
              const ownershipRules = [];
              for (const line of codeownersLines) {
                const [pattern, ...owners] = line.trim().split(/\s+/);
                if (pattern && owners.length > 0) {
                  ownershipRules.push({ pattern, owners });
                }
              }
              
              // Match files against CODEOWNERS patterns
              const teamReviewers = new Set();
              const individualReviewers = new Set();
              
              for (const file of changedPaths) {
                // Find matching rules for this file
                // Note: This is a simplified matching algorithm
                // GitHub's actual algorithm is more sophisticated
                for (const rule of ownershipRules) {
                  const pattern = rule.pattern.replace('/', '\/').replace('*', '.*');
                  const regex = new RegExp(pattern);
                  
                  if (regex.test(file)) {
                    // Add owners from this rule
                    for (const owner of rule.owners) {
                      if (owner.startsWith('@zopiolabs/')) {
                        // Team reviewer (remove @ prefix for GitHub API)
                        teamReviewers.add(owner.substring(1).split('/')[1]);
                      } else if (owner.startsWith('@')) {
                        // Individual reviewer (remove @ prefix for GitHub API)
                        individualReviewers.add(owner.substring(1));
                      }
                    }
                  }
                }
              }
              
              // Request reviews from teams
              if (teamReviewers.size > 0) {
                try {
                  const teamReviewersList = Array.from(teamReviewers);
                  await github.rest.pulls.requestReviewers({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    team_reviewers: teamReviewersList
                  });
                  console.log(`Assigned team reviewers: ${teamReviewersList.join(', ')}`);
                } catch (error) {
                  console.error('Error assigning team reviewers:', error);
                }
              }
              
              // Request reviews from individuals
              if (individualReviewers.size > 0) {
                try {
                  const individualReviewersList = Array.from(individualReviewers);
                  await github.rest.pulls.requestReviewers({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    reviewers: individualReviewersList
                  });
                  console.log(`Assigned individual reviewers: ${individualReviewersList.join(', ')}`);
                } catch (error) {
                  console.error('Error assigning individual reviewers:', error);
                }
              }
              
              if (teamReviewers.size === 0 && individualReviewers.size === 0) {
                console.log('No matching reviewers found in CODEOWNERS for the changed files');
              }
              
            } catch (error) {
              console.error('Error processing CODEOWNERS file:', error);
              
              // Fallback to core team if CODEOWNERS processing fails
              try {
                await github.rest.pulls.requestReviewers({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  team_reviewers: ['core-team']
                });
                console.log('Fallback: Assigned core-team as reviewer');
              } catch (fallbackError) {
                console.error('Error assigning fallback reviewer:', fallbackError);
              }
            }
      
      # Optional: Add a comment to the PR with reviewer assignment info
      - name: Add reviewer assignment comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: 'ðŸ¤– Reviewers have been automatically assigned based on the CODEOWNERS file. If you need different reviewers, please update manually.'
            });